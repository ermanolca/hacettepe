@model Hacettepe.Domain.Page
@{
    Layout = "_Layout";
    var title = Model.Id == 0 ? "Yeni Sayfa Oluşturma" : "Sayfa Güncelleme";
    ViewBag.Title = title;
}

@section header
{
  <link rel="stylesheet" src="https://cdnjs.cloudflare.com/ajax/libs/grapesjs/0.21.12/css/grapes.min.css" />
  <script src="//unpkg.com/grapesjs"></script>
}

<div id="gjs">
  <h1>Hello World Component!</h1>
</div>
@section Scripts {
  <script src="https://unpkg.com/grapesjs-preset-webpage"></script>
  <script src="https://unpkg.com/grapesjs-blocks-basic@1.0.2/dist/index.js"></script>
  <script src="https://unpkg.com/grapesjs-video-embed-manager"></script>
  <script src="/js/grapesjs_bootstrap5_blocks.js"></script>
  <script type="text/javascript">
    const editor = grapesjs.init({
      // Indicate where to init the editor. You can also pass an HTMLElement
      container: '#gjs',
      // Get the content for the canvas directly from the element
      // As an alternative we could use: `components: '<h1>Hello World Component!</h1>'`,
      fromElement: true,
      // Size of the editor
      height: '300px',
      width: 'auto',
      // Disable the storage manager for the moment
      storageManager: false,
      plugins: ['gjs-blocks-basic'],
      canvas: {
        styles: [
            'https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css'
        ],
        scripts: [
            'https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js',
            'https://cdn.jsdelivr.net/npm/@@popperjs/core@2.11.8/dist/umd/popper.min.js',
            'https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js'
        ]
      }
    });
        const domComponent = editor.DomComponents;
            
            const img_src_default = "https://dummyimage.com/800x500/999/222";
              const imageType = domComponent.getType("image");
              const model = imageType.model;
              const type = "bs-image";
            
              domComponent.addType(type, {
                extend: "image",
                model: {
                  defaults: Object.assign({}, model.prototype.defaults, {
                    "custom-name": "Image",
                    tagName: "img",
                    resizable: 1,
                    classes: ["img-fluid"],
                    traits: [
                      {
                        type: "text",
                        label: "Source (URL)",
                        name: "src",
                      },
                      {
                        type: "text",
                        label: "Alternate text",
                        name: "alt",
                      },
                    ].concat(model.prototype.defaults.traits),
                  }),
                },
                isComponent: function (el) {
                  if (el && el.tagName === "IMG") {
                    return { type: type };
                  }
                },
              });
              
                const videoType = domComponent.getType("video");
                const modelVideo = videoType.model;
                const view = videoType.view;
                const typeVideo = "bs-embed-responsive";
        
              domComponent.addType(typeVideo, {
                  model: {
                    defaults: Object.assign({}, modelVideo.prototype.defaults, {
                      "custom-name": "Video",
                      resizable: false,
                      droppable: false,
                      draggable: false,
                      copyable: false,
                      provider: "so",
                      classes: ["embed-responsive-item"],
                    }),
                  },
                  isComponent: function (el) {
                    if (el && el.className === "embed-responsive-item") {
                      var result = {
                        provider: "so",
                        type: typeVideo,
                      };
                      var isYtProv = /youtube\.com\/embed/.test(el.src);
                      var isYtncProv = /youtube-nocookie\.com\/embed/.test(el.src);
                      var isViProv = /player\.vimeo\.com\/video/.test(el.src);
                      var isExtProv = isYtProv || isYtncProv || isViProv;
                      if (el.tagName == "VIDEO" || (el.tagName == "IFRAME" && isExtProv)) {
                        if (el.src) result.src = el.src;
                        if (isExtProv) {
                          if (isYtProv) result.provider = "yt";
                          else if (isYtncProv) result.provider = "ytnc";
                          else if (isViProv) result.provider = "vi";
                        }
                      }
                      return result;
                    }
                  },
                });
              
              const bm = editor.Blocks; // `Blocks` is an alias of `BlockManager`
              
              // Add a new Block
              const block = bm.add("bs-image", {
                                   label: `
                                           <div>image</div>
                                       `,
                                   category: "Media",
                                   content: {
                                     type: "bs-image",
                                   },
                                 });
              bm.add("bs-video", {
                  label: `
                          
                          <div>video</div>
                      `,
                  category: "Media",
                  content: {
                    type: "bs-video",
                  },
                });
  </script>
}
<style>
    #gjs {
         border: 3px solid #444;
       }
       
       /* Reset some default styling */
       .gjs-cv-canvas {
         top: 0;
         width: 100%;
         height: 100%;
       }</style>